name: Security and API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks weekly
    - cron: '0 2 * * 1'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install detect-secrets
    
    - name: Run security scan
      run: |
        echo "🔍 Scanning for secrets..."
        # Create baseline if it doesn't exist
        if [ ! -f .secrets.baseline ]; then
          echo "Creating secrets baseline..."
          detect-secrets scan --baseline .secrets.baseline || true
        else
          detect-secrets scan --baseline .secrets.baseline || true
        fi
        echo "✅ Security scan complete"
    
    - name: Check for hardcoded API keys
      run: |
        echo "🔍 Checking for hardcoded API keys in source files..."
        # Create a list of files to exclude (documentation, security files, etc.)
        echo "Excluding documentation and security files from scan..."
        
        # Check Python source files only, excluding documentation
        if find . -name "*.py" -not -path "./docs/*" -not -name "SECURITY*.py" -not -name "*test*.py" | xargs grep -l "7Zh9UWfJ4WsW8vRXmO3NRVmwMPZuFudNeo44IcR2" 2>/dev/null; then
          echo "❌ Found hardcoded API key in Python source files!"
          exit 1
        fi
        
        # Check other source files (JS, TS, etc.) if they exist
        if find . -name "*.js" -o -name "*.ts" -o -name "*.json" | xargs grep -l "7Zh9UWfJ4WsW8vRXmO3NRVmwMPZuFudNeo44IcR2" 2>/dev/null; then
          echo "❌ Found hardcoded API key in other source files!"
          exit 1
        fi
        
        echo "✅ No hardcoded API keys found in source files"
        echo "   (Documentation files with examples are excluded from this check)"
        
        # Additional check for any high-entropy strings that might be API keys
        echo "🔍 Checking for potential API keys in source files..."
        if find . -name "*.py" -not -path "./docs/*" -not -name "SECURITY*.py" | xargs grep -E '["'"'"'][a-zA-Z0-9]{20,}["'"'"']' 2>/dev/null | grep -v "your_eia_api_key_here" | grep -v "placeholder" | grep -v "example"; then
          echo "⚠️  Found potential high-entropy strings in source files"
          echo "   Please review these to ensure they are not API keys:"
          find . -name "*.py" -not -path "./docs/*" -not -name "SECURITY*.py" | xargs grep -E '["'"'"'][a-zA-Z0-9]{20,}["'"'"']' 2>/dev/null | grep -v "your_eia_api_key_here" | grep -v "placeholder" | grep -v "example" || true
        else
          echo "✅ No potential API keys found in source files"
        fi

  api-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test API connectivity
      env:
        EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
      run: |
        echo "🔋 Testing EIA API connectivity..."
        python test_natural_gas.py
        echo "✅ API test complete"
    
    - name: Run smoke tests
      env:
        EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
      run: |
        echo "🧪 Running smoke tests..."
        pytest -q
        echo "✅ Smoke tests complete"

  environment-setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test environment setup
      env:
        EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
      run: |
        echo "🔧 Testing environment setup..."
        python scripts/setup_env.py
        echo "✅ Environment setup test complete"
